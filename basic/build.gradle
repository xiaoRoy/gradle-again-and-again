import org.apache.commons.codec.binary.Base64

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
    }
}

tasks.register('hello') {
    doLast {
        println 'hello wrold!'
    }
}

tasks.register('upper') {
    doLast {
        String text = 'mY_nAmE'
        println "Original: $text"
        println "Upper case: ${text.toUpperCase()}"
    }
}

tasks.register('intro') {
    dependsOn tasks.hello
    doLast {
        println "I am gradle!"
    }
}

4.times { counter -> 
    tasks.register("task$counter") {
        doLast {
            println "I am task number $counter!"
        }
    }
}

tasks.named('task0') {
    dependsOn('task2', 'task3')
}

tasks.register('earth') {
    doLast {
        println 'Hello Earth'
    }
}

TaskProvider earthTask = tasks.named('earth')

earthTask.configure {
    doFirst {
        println 'Hello Venus'
    }
}

earthTask.configure {
    doLast {
        println 'Hello Mars'
    }
}

earthTask.configure {
    doLast {
        println 'Hello Jupiter'
    }
}

tasks.named('earth') {
    doLast {
        println 'Hello Saturn'
    }
}

tasks.register('loadFile') {
    doLast {
        def files = file('./.gradle').listFiles().sort()
        files.each { File file -> 
            if(file.isFile()) {
                ant.loadfile(srcFile: file, property: file.name)
                println "*** $file.name ***"
                println "${ant.properties[file.name]}"
            }
        }
    }
}

tasks.register('loadFileSecond') {
    doLast {
        def files = loadFile('./.gradle')
        files.each { File file -> 
            if(file.isFile()) {
                ant.loadfile(srcFile: file, property: file.name)
                println "*** $file.name ***"
                println "${ant.properties[file.name]}"
            }
        }
    }
}

File[] loadFile(String dir) {
    file(dir).listFiles({File file -> file.isFile()} as FileFilter).sort()
}

//why?
loadFile {
    doLast{
        println 'Last of the last.'
    } 
}


tasks.register('encode') {
    doLast {
        def byte[] encodedString = new Base64().encode('hello world\n'.getBytes())
        println new String(encodedString)
    }
}